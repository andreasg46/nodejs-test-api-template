---
openapi: 3.0.0
info:
  title: NodeJS REST API basic template
  version: 1.0.0
  description: REST APIs Library and Documentation. This program uses
servers:
  - url: "http://localhost:7000/"
    description: Development Server
tags:
  - name: Accounts
    description: Everything about accounts
  - name: Users
    description: Everything about users
paths:
  /account/create:
    post:
      summary: Creates a new account
      tags: [ Accounts ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        200:
          description: The account was successfully created
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Account'
        500:
          description: Server error
      security:
        - bearerAuth: [ ]
  /login:
    post:
      summary: Logs into the System
      tags: [ Accounts ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      responses:
        200:
          description: The account was successfully logged id
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Account'
        500:
          description: Server error
      security:
        - bearerAuth: [ ]
  /users:
    get:
      summary: Returns the list of all users
      tags: [ Users ]
      responses:
        200:
          description: The list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /user/create:
    post:
      summary: Creates a new user
      tags: [ Users ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: The user was successfully created
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
        500:
          description: Server error
      security:
        - bearerAuth: [ ]
  /user/update/{id}:
    put:
      summary: Updates a user by id
      tags: [ Users ]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: The user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/User'
      responses:
        200:
          description: The user was updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: The user was not found
      security:
        - bearerAuth: [ ]
  /users/delete-all:
    delete:
      summary: Delete all users
      tags: [ Users ]
      responses:
        200:
          description: The users were deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: No users found
      security:
        - bearerAuth: [ ]
components:
  schemas:
    Account:
      type: object
      required:
        - email
        - password
      properties:
        id:
          type: integer
          description: The auto-generated id of the account
        email:
          type: string
          description: The account email
        password:
          type: string
          description: The account password
      example:
        email: test@domain.com
        password: password
    User:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          description: The auto-generated id of the user
        age:
          type: integer
          description: The user age
        location:
          type: string
          description: The user location
        gender:
          type: string
          description: The user gender
        nationality:
          type: string
          description: The user nationality
        language:
          type: string
          description: The user language
      example:
        id: 43
        age: 25
        location: Nicosia
        gender: Male
        nationality: Cypriot
        language: Greek
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT
      